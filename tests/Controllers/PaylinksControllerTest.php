<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use FortisAPILib\Controllers\PaylinksController;
use FortisAPILib\Exceptions;

class PaylinksControllerTest extends BaseTestController
{
    /**
     * @var PaylinksController PaylinksController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getPaylinksController();
    }

    public function testListAllPaylinks()
    {
        // Parameters for the API call
        $page = null;
        $order = null;
        $filterBy = null;
        $expand = null;
        $format = null;
        $typeahead = null;
        $fields = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->listAllPaylinks(
                $page,
                $order,
                $filterBy,
                $expand,
                $format,
                $typeahead,
                $fields
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"type":"PaylinksCollection","list":[{"location_id":"11e95f8ec39de8fbdb0a4f1a"' .
                ',"cc_product_transaction_id":"11e95f8ec39de8fbdb0a4f1a","email":"email@domain.c' .
                'om","amount_due":1,"contact_id":"11e95f8ec39de8fbdb0a4f1a","ach_product_transac' .
                'tion_id":"11e95f8ec39de8fbdb0a4f1a","expire_date":"2021-12-01","display_product' .
                '_transaction_receipt_details":true,"display_billing_fields":true,"delivery_meth' .
                'od":0,"cell_phone":"3339998822","description":"Description","store_token":false' .
                ',"store_token_title":"John Account","bank_funded_only_override":false,"tags":["' .
                'Tag 1"],"id":"11e95f8ec39de8fbdb0a4f1a","status_id":true,"status_code":1,"activ' .
                'e":true,"created_ts":1422040992,"modified_ts":1422040992,"created_user_id":"11e' .
                '95f8ec39de8fbdb0a4f1a","modified_user_id":"11e95f8ec39de8fbdb0a4f1a"}],"links":' .
                '{"type":"Links","first":"/v1/endpoint?page[size]=10&page[number]=1","previous":' .
                '"/v1/endpoint?page[size]=10&page[number]=5","next":"/v1/endpoint?page[size]=10&' .
                'page[number]=7","last":"/v1/endpoint?page[size]=10&page[number]=42"},"paginatio' .
                'n":{"type":"Pagination","total_count":423,"page_count":42,"page_number":6,"page' .
                '_size":10},"sort":{"type":"Sorting","fields":[{"field":"last_name","order":"asc' .
                '"}]}}'
            )))
            ->assert();
    }

    public function testDeletePaylink()
    {
        // Parameters for the API call
        $paylinkId = '11e95f8ec39de8fbdb0a4f1a';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletePaylink($paylinkId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(204)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"type":"Paylink","data":{"location_id":"11e95f8ec39de8fbdb0a4f1a","cc_product' .
                '_transaction_id":"11e95f8ec39de8fbdb0a4f1a","email":"email@domain.com","amount_' .
                'due":1,"contact_id":"11e95f8ec39de8fbdb0a4f1a","ach_product_transaction_id":"11' .
                'e95f8ec39de8fbdb0a4f1a","expire_date":"2021-12-01","display_product_transaction' .
                '_receipt_details":true,"display_billing_fields":true,"delivery_method":0,"cell_' .
                'phone":"3339998822","description":"Description","store_token":false,"store_toke' .
                'n_title":"John Account","bank_funded_only_override":false,"tags":["Tag 1"],"id"' .
                ':"11e95f8ec39de8fbdb0a4f1a","status_id":true,"status_code":1,"active":true,"cre' .
                'ated_ts":1422040992,"modified_ts":1422040992,"created_user_id":"11e95f8ec39de8f' .
                'bdb0a4f1a","modified_user_id":"11e95f8ec39de8fbdb0a4f1a"}}'
            )))
            ->assert();
    }

    public function testViewSinglePaylink()
    {
        // Parameters for the API call
        $paylinkId = '11e95f8ec39de8fbdb0a4f1a';
        $expand = null;
        $fields = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->viewSinglePaylink($paylinkId, $expand, $fields);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"type":"Paylink","data":{"location_id":"11e95f8ec39de8fbdb0a4f1a","cc_product' .
                '_transaction_id":"11e95f8ec39de8fbdb0a4f1a","email":"email@domain.com","amount_' .
                'due":1,"contact_id":"11e95f8ec39de8fbdb0a4f1a","ach_product_transaction_id":"11' .
                'e95f8ec39de8fbdb0a4f1a","expire_date":"2021-12-01","display_product_transaction' .
                '_receipt_details":true,"display_billing_fields":true,"delivery_method":0,"cell_' .
                'phone":"3339998822","description":"Description","store_token":false,"store_toke' .
                'n_title":"John Account","bank_funded_only_override":false,"tags":["Tag 1"],"id"' .
                ':"11e95f8ec39de8fbdb0a4f1a","status_id":true,"status_code":1,"active":true,"cre' .
                'ated_ts":1422040992,"modified_ts":1422040992,"created_user_id":"11e95f8ec39de8f' .
                'bdb0a4f1a","modified_user_id":"11e95f8ec39de8fbdb0a4f1a"}}'
            )))
            ->assert();
    }

    public function testResendPaylink()
    {
        // Parameters for the API call
        $paylinkId = '11e95f8ec39de8fbdb0a4f1a';
        $expand = null;
        $email = null;
        $sms = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->resendPaylink($paylinkId, $expand, $email, $sms);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"type":"Paylink","data":{"location_id":"11e95f8ec39de8fbdb0a4f1a","cc_product' .
                '_transaction_id":"11e95f8ec39de8fbdb0a4f1a","email":"email@domain.com","amount_' .
                'due":1,"contact_id":"11e95f8ec39de8fbdb0a4f1a","ach_product_transaction_id":"11' .
                'e95f8ec39de8fbdb0a4f1a","expire_date":"2021-12-01","display_product_transaction' .
                '_receipt_details":true,"display_billing_fields":true,"delivery_method":0,"cell_' .
                'phone":"3339998822","description":"Description","store_token":false,"store_toke' .
                'n_title":"John Account","bank_funded_only_override":false,"tags":["Tag 1"],"id"' .
                ':"11e95f8ec39de8fbdb0a4f1a","status_id":true,"status_code":1,"active":true,"cre' .
                'ated_ts":1422040992,"modified_ts":1422040992,"created_user_id":"11e95f8ec39de8f' .
                'bdb0a4f1a","modified_user_id":"11e95f8ec39de8fbdb0a4f1a"}}'
            )))
            ->assert();
    }
}
