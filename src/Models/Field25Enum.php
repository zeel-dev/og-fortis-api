<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

class Field25Enum
{
    public const ID = 'id';

    public const CREATED_TS = 'created_ts';

    public const PRODUCT_TRANSACTION_ID = 'product_transaction_id';

    public const PROCESSING_STATUS_ID = 'processing_status_id';

    public const BATCH_NUM = 'batch_num';

    public const IS_OPEN = 'is_open';

    public const SETTLEMENT_FILE_NAME = 'settlement_file_name';

    public const BATCH_CLOSE_TS = 'batch_close_ts';

    public const BATCH_CLOSE_DETAIL = 'batch_close_detail';

    public const TOTAL_SALE_AMOUNT = 'total_sale_amount';

    public const TOTAL_SALE_COUNT = 'total_sale_count';

    public const TOTAL_REFUND_AMOUNT = 'total_refund_amount';

    public const TOTAL_REFUND_COUNT = 'total_refund_count';

    public const TOTAL_VOID_AMOUNT = 'total_void_amount';

    public const TOTAL_VOID_COUNT = 'total_void_count';

    public const TOTAL_BLIND_REFUND_AMOUNT = 'total_blind_refund_amount';

    public const TOTAL_BLIND_REFUND_COUNT = 'total_blind_refund_count';

    public const CHANGELOGS = 'changelogs';

    public const POSTBACK_LOGS = 'postback_logs';

    public const PRODUCT_TRANSACTION = 'product_transaction';

    private const _ALL_VALUES = [
        self::ID,
        self::CREATED_TS,
        self::PRODUCT_TRANSACTION_ID,
        self::PROCESSING_STATUS_ID,
        self::BATCH_NUM,
        self::IS_OPEN,
        self::SETTLEMENT_FILE_NAME,
        self::BATCH_CLOSE_TS,
        self::BATCH_CLOSE_DETAIL,
        self::TOTAL_SALE_AMOUNT,
        self::TOTAL_SALE_COUNT,
        self::TOTAL_REFUND_AMOUNT,
        self::TOTAL_REFUND_COUNT,
        self::TOTAL_VOID_AMOUNT,
        self::TOTAL_VOID_COUNT,
        self::TOTAL_BLIND_REFUND_AMOUNT,
        self::TOTAL_BLIND_REFUND_COUNT,
        self::CHANGELOGS,
        self::POSTBACK_LOGS,
        self::PRODUCT_TRANSACTION
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for Field25Enum.");
    }
}
