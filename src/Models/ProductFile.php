<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class ProductFile implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $title;

    /**
     * @var string|null
     */
    private $productFileCredentialId;

    /**
     * @var array
     */
    private $freeBytes = [];

    /**
     * @var array
     */
    private $byteIncrement = [];

    /**
     * @var array
     */
    private $maxFileSizeBytes = [];

    /**
     * @var array
     */
    private $incrementCost = [];

    /**
     * @var array
     */
    private $monthlyFee = [];

    /**
     * @var array
     */
    private $fileExtAllowed = [];

    /**
     * @var array
     */
    private $container = [];

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $modifiedTs = [];

    /**
     * @var bool|null
     */
    private $active;

    /**
     * @var array
     */
    private $createdUserId = [];

    /**
     * Returns Title.
     * Title
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Product File Credential Id.
     * Product File Credential Id
     */
    public function getProductFileCredentialId(): ?string
    {
        return $this->productFileCredentialId;
    }

    /**
     * Sets Product File Credential Id.
     * Product File Credential Id
     *
     * @maps product_file_credential_id
     */
    public function setProductFileCredentialId(?string $productFileCredentialId): void
    {
        $this->productFileCredentialId = $productFileCredentialId;
    }

    /**
     * Returns Free Bytes.
     * Free Bytes
     */
    public function getFreeBytes(): ?float
    {
        if (count($this->freeBytes) == 0) {
            return null;
        }
        return $this->freeBytes['value'];
    }

    /**
     * Sets Free Bytes.
     * Free Bytes
     *
     * @maps free_bytes
     */
    public function setFreeBytes(?float $freeBytes): void
    {
        $this->freeBytes['value'] = $freeBytes;
    }

    /**
     * Unsets Free Bytes.
     * Free Bytes
     */
    public function unsetFreeBytes(): void
    {
        $this->freeBytes = [];
    }

    /**
     * Returns Byte Increment.
     * Byte Increment
     */
    public function getByteIncrement(): ?float
    {
        if (count($this->byteIncrement) == 0) {
            return null;
        }
        return $this->byteIncrement['value'];
    }

    /**
     * Sets Byte Increment.
     * Byte Increment
     *
     * @maps byte_increment
     */
    public function setByteIncrement(?float $byteIncrement): void
    {
        $this->byteIncrement['value'] = $byteIncrement;
    }

    /**
     * Unsets Byte Increment.
     * Byte Increment
     */
    public function unsetByteIncrement(): void
    {
        $this->byteIncrement = [];
    }

    /**
     * Returns Max File Size Bytes.
     * Max File Size Bytes
     */
    public function getMaxFileSizeBytes(): ?float
    {
        if (count($this->maxFileSizeBytes) == 0) {
            return null;
        }
        return $this->maxFileSizeBytes['value'];
    }

    /**
     * Sets Max File Size Bytes.
     * Max File Size Bytes
     *
     * @maps max_file_size_bytes
     */
    public function setMaxFileSizeBytes(?float $maxFileSizeBytes): void
    {
        $this->maxFileSizeBytes['value'] = $maxFileSizeBytes;
    }

    /**
     * Unsets Max File Size Bytes.
     * Max File Size Bytes
     */
    public function unsetMaxFileSizeBytes(): void
    {
        $this->maxFileSizeBytes = [];
    }

    /**
     * Returns Increment Cost.
     * Increment Cost
     */
    public function getIncrementCost(): ?float
    {
        if (count($this->incrementCost) == 0) {
            return null;
        }
        return $this->incrementCost['value'];
    }

    /**
     * Sets Increment Cost.
     * Increment Cost
     *
     * @maps increment_cost
     */
    public function setIncrementCost(?float $incrementCost): void
    {
        $this->incrementCost['value'] = $incrementCost;
    }

    /**
     * Unsets Increment Cost.
     * Increment Cost
     */
    public function unsetIncrementCost(): void
    {
        $this->incrementCost = [];
    }

    /**
     * Returns Monthly Fee.
     * Monthly Fee
     */
    public function getMonthlyFee(): ?int
    {
        if (count($this->monthlyFee) == 0) {
            return null;
        }
        return $this->monthlyFee['value'];
    }

    /**
     * Sets Monthly Fee.
     * Monthly Fee
     *
     * @maps monthly_fee
     */
    public function setMonthlyFee(?int $monthlyFee): void
    {
        $this->monthlyFee['value'] = $monthlyFee;
    }

    /**
     * Unsets Monthly Fee.
     * Monthly Fee
     */
    public function unsetMonthlyFee(): void
    {
        $this->monthlyFee = [];
    }

    /**
     * Returns File Ext Allowed.
     * File Ext Allowed
     */
    public function getFileExtAllowed(): ?string
    {
        if (count($this->fileExtAllowed) == 0) {
            return null;
        }
        return $this->fileExtAllowed['value'];
    }

    /**
     * Sets File Ext Allowed.
     * File Ext Allowed
     *
     * @maps file_ext_allowed
     */
    public function setFileExtAllowed(?string $fileExtAllowed): void
    {
        $this->fileExtAllowed['value'] = $fileExtAllowed;
    }

    /**
     * Unsets File Ext Allowed.
     * File Ext Allowed
     */
    public function unsetFileExtAllowed(): void
    {
        $this->fileExtAllowed = [];
    }

    /**
     * Returns Container.
     * Container
     */
    public function getContainer(): ?string
    {
        if (count($this->container) == 0) {
            return null;
        }
        return $this->container['value'];
    }

    /**
     * Sets Container.
     * Container
     *
     * @maps container
     */
    public function setContainer(?string $container): void
    {
        $this->container['value'] = $container;
    }

    /**
     * Unsets Container.
     * Container
     */
    public function unsetContainer(): void
    {
        $this->container = [];
    }

    /**
     * Returns Id.
     * Product File Id
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Product File Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): ?int
    {
        if (count($this->modifiedTs) == 0) {
            return null;
        }
        return $this->modifiedTs['value'];
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @maps modified_ts
     */
    public function setModifiedTs(?int $modifiedTs): void
    {
        $this->modifiedTs['value'] = $modifiedTs;
    }

    /**
     * Unsets Modified Ts.
     * Modified Time Stamp
     */
    public function unsetModifiedTs(): void
    {
        $this->modifiedTs = [];
    }

    /**
     * Returns Active.
     * Active
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Sets Active.
     * Active
     *
     * @maps active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Created User Id.
     * User ID Created the register
     */
    public function getCreatedUserId(): ?string
    {
        if (count($this->createdUserId) == 0) {
            return null;
        }
        return $this->createdUserId['value'];
    }

    /**
     * Sets Created User Id.
     * User ID Created the register
     *
     * @maps created_user_id
     */
    public function setCreatedUserId(?string $createdUserId): void
    {
        $this->createdUserId['value'] = $createdUserId;
    }

    /**
     * Unsets Created User Id.
     * User ID Created the register
     */
    public function unsetCreatedUserId(): void
    {
        $this->createdUserId = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->title)) {
            $json['title']                      = $this->title;
        }
        if (isset($this->productFileCredentialId)) {
            $json['product_file_credential_id'] = $this->productFileCredentialId;
        }
        if (!empty($this->freeBytes)) {
            $json['free_bytes']                 = $this->freeBytes['value'];
        }
        if (!empty($this->byteIncrement)) {
            $json['byte_increment']             = $this->byteIncrement['value'];
        }
        if (!empty($this->maxFileSizeBytes)) {
            $json['max_file_size_bytes']        = $this->maxFileSizeBytes['value'];
        }
        if (!empty($this->incrementCost)) {
            $json['increment_cost']             = $this->incrementCost['value'];
        }
        if (!empty($this->monthlyFee)) {
            $json['monthly_fee']                = $this->monthlyFee['value'];
        }
        if (!empty($this->fileExtAllowed)) {
            $json['file_ext_allowed']           = $this->fileExtAllowed['value'];
        }
        if (!empty($this->container)) {
            $json['container']                  = $this->container['value'];
        }
        if (isset($this->id)) {
            $json['id']                         = $this->id;
        }
        if (!empty($this->createdTs)) {
            $json['created_ts']                 = $this->createdTs['value'];
        }
        if (!empty($this->modifiedTs)) {
            $json['modified_ts']                = $this->modifiedTs['value'];
        }
        if (isset($this->active)) {
            $json['active']                     = $this->active;
        }
        if (!empty($this->createdUserId)) {
            $json['created_user_id']            = $this->createdUserId['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
