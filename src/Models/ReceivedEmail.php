<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class ReceivedEmail implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $subject;

    /**
     * @var string|null
     */
    private $body;

    /**
     * @var string|null
     */
    private $sourceAddress;

    /**
     * @var string|null
     */
    private $returnPath;

    /**
     * @var array
     */
    private $providerId = [];

    /**
     * @var array
     */
    private $domainId = [];

    /**
     * @var array
     */
    private $reasonSent = [];

    /**
     * @var array
     */
    private $reasonModel = [];

    /**
     * @var array
     */
    private $reasonModelId = [];

    /**
     * @var array
     */
    private $replyTo = [];

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var int|null
     */
    private $createdTs;

    /**
     * Returns Subject.
     * Subject
     */
    public function getSubject(): ?string
    {
        return $this->subject;
    }

    /**
     * Sets Subject.
     * Subject
     *
     * @maps subject
     */
    public function setSubject(?string $subject): void
    {
        $this->subject = $subject;
    }

    /**
     * Returns Body.
     * Body
     */
    public function getBody(): ?string
    {
        return $this->body;
    }

    /**
     * Sets Body.
     * Body
     *
     * @maps body
     */
    public function setBody(?string $body): void
    {
        $this->body = $body;
    }

    /**
     * Returns Source Address.
     * Source Address
     */
    public function getSourceAddress(): ?string
    {
        return $this->sourceAddress;
    }

    /**
     * Sets Source Address.
     * Source Address
     *
     * @maps source_address
     */
    public function setSourceAddress(?string $sourceAddress): void
    {
        $this->sourceAddress = $sourceAddress;
    }

    /**
     * Returns Return Path.
     * Return Path
     */
    public function getReturnPath(): ?string
    {
        return $this->returnPath;
    }

    /**
     * Sets Return Path.
     * Return Path
     *
     * @maps return_path
     */
    public function setReturnPath(?string $returnPath): void
    {
        $this->returnPath = $returnPath;
    }

    /**
     * Returns Provider Id.
     * Provider
     */
    public function getProviderId(): ?string
    {
        if (count($this->providerId) == 0) {
            return null;
        }
        return $this->providerId['value'];
    }

    /**
     * Sets Provider Id.
     * Provider
     *
     * @maps provider_id
     */
    public function setProviderId(?string $providerId): void
    {
        $this->providerId['value'] = $providerId;
    }

    /**
     * Unsets Provider Id.
     * Provider
     */
    public function unsetProviderId(): void
    {
        $this->providerId = [];
    }

    /**
     * Returns Domain Id.
     * Domain
     */
    public function getDomainId(): ?string
    {
        if (count($this->domainId) == 0) {
            return null;
        }
        return $this->domainId['value'];
    }

    /**
     * Sets Domain Id.
     * Domain
     *
     * @maps domain_id
     */
    public function setDomainId(?string $domainId): void
    {
        $this->domainId['value'] = $domainId;
    }

    /**
     * Unsets Domain Id.
     * Domain
     */
    public function unsetDomainId(): void
    {
        $this->domainId = [];
    }

    /**
     * Returns Reason Sent.
     * Reason Sent
     */
    public function getReasonSent(): ?string
    {
        if (count($this->reasonSent) == 0) {
            return null;
        }
        return $this->reasonSent['value'];
    }

    /**
     * Sets Reason Sent.
     * Reason Sent
     *
     * @maps reason_sent
     */
    public function setReasonSent(?string $reasonSent): void
    {
        $this->reasonSent['value'] = $reasonSent;
    }

    /**
     * Unsets Reason Sent.
     * Reason Sent
     */
    public function unsetReasonSent(): void
    {
        $this->reasonSent = [];
    }

    /**
     * Returns Reason Model.
     * Reason Model
     */
    public function getReasonModel(): ?string
    {
        if (count($this->reasonModel) == 0) {
            return null;
        }
        return $this->reasonModel['value'];
    }

    /**
     * Sets Reason Model.
     * Reason Model
     *
     * @maps reason_model
     * @factory \FortisAPILib\Models\ReasonModelEnum::checkValue
     */
    public function setReasonModel(?string $reasonModel): void
    {
        $this->reasonModel['value'] = $reasonModel;
    }

    /**
     * Unsets Reason Model.
     * Reason Model
     */
    public function unsetReasonModel(): void
    {
        $this->reasonModel = [];
    }

    /**
     * Returns Reason Model Id.
     * Reason Model
     */
    public function getReasonModelId(): ?string
    {
        if (count($this->reasonModelId) == 0) {
            return null;
        }
        return $this->reasonModelId['value'];
    }

    /**
     * Sets Reason Model Id.
     * Reason Model
     *
     * @maps reason_model_id
     */
    public function setReasonModelId(?string $reasonModelId): void
    {
        $this->reasonModelId['value'] = $reasonModelId;
    }

    /**
     * Unsets Reason Model Id.
     * Reason Model
     */
    public function unsetReasonModelId(): void
    {
        $this->reasonModelId = [];
    }

    /**
     * Returns Reply To.
     * Reply To
     */
    public function getReplyTo(): ?string
    {
        if (count($this->replyTo) == 0) {
            return null;
        }
        return $this->replyTo['value'];
    }

    /**
     * Sets Reply To.
     * Reply To
     *
     * @maps reply_to
     */
    public function setReplyTo(?string $replyTo): void
    {
        $this->replyTo['value'] = $replyTo;
    }

    /**
     * Unsets Reply To.
     * Reply To
     */
    public function unsetReplyTo(): void
    {
        $this->replyTo = [];
    }

    /**
     * Returns Id.
     * Log Email Id
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Log Email Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->subject)) {
            $json['subject']         = $this->subject;
        }
        if (isset($this->body)) {
            $json['body']            = $this->body;
        }
        if (isset($this->sourceAddress)) {
            $json['source_address']  = $this->sourceAddress;
        }
        if (isset($this->returnPath)) {
            $json['return_path']     = $this->returnPath;
        }
        if (!empty($this->providerId)) {
            $json['provider_id']     = $this->providerId['value'];
        }
        if (!empty($this->domainId)) {
            $json['domain_id']       = $this->domainId['value'];
        }
        if (!empty($this->reasonSent)) {
            $json['reason_sent']     = $this->reasonSent['value'];
        }
        if (!empty($this->reasonModel)) {
            $json['reason_model']    = ReasonModelEnum::checkValue($this->reasonModel['value']);
        }
        if (!empty($this->reasonModelId)) {
            $json['reason_model_id'] = $this->reasonModelId['value'];
        }
        if (!empty($this->replyTo)) {
            $json['reply_to']        = $this->replyTo['value'];
        }
        if (isset($this->id)) {
            $json['id']              = $this->id;
        }
        if (isset($this->createdTs)) {
            $json['created_ts']      = $this->createdTs;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
