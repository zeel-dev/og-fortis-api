<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

class Field39Enum
{
    public const ACCOUNT_VAULT_ID = 'account_vault_id';

    public const TOKEN_ID = 'token_id';

    public const CONTACT_ID = 'contact_id';

    public const ACCOUNT_VAULT_API_ID = 'account_vault_api_id';

    public const TOKEN_API_ID = 'token_api_id';

    public const _JOI = '_joi';

    public const ACTIVE = 'active';

    public const DESCRIPTION = 'description';

    public const END_DATE = 'end_date';

    public const INSTALLMENT_TOTAL_COUNT = 'installment_total_count';

    public const INTERVAL = 'interval';

    public const INTERVAL_TYPE = 'interval_type';

    public const LOCATION_ID = 'location_id';

    public const NOTIFICATION_DAYS = 'notification_days';

    public const PAYMENT_METHOD = 'payment_method';

    public const PRODUCT_TRANSACTION_ID = 'product_transaction_id';

    public const RECURRING_ID = 'recurring_id';

    public const RECURRING_API_ID = 'recurring_api_id';

    public const START_DATE = 'start_date';

    public const STATUS = 'status';

    public const TRANSACTION_AMOUNT = 'transaction_amount';

    public const TERMS_AGREE = 'terms_agree';

    public const TERMS_AGREE_IP = 'terms_agree_ip';

    public const RECURRING_C1 = 'recurring_c1';

    public const RECURRING_C2 = 'recurring_c2';

    public const RECURRING_C3 = 'recurring_c3';

    public const SEND_TO_PROC_AS_RECUR = 'send_to_proc_as_recur';

    public const TAGS = 'tags';

    public const SECONDARY_AMOUNT = 'secondary_amount';

    public const CURRENCY = 'currency';

    public const ID = 'id';

    public const NEXT_RUN_DATE = 'next_run_date';

    public const CREATED_TS = 'created_ts';

    public const MODIFIED_TS = 'modified_ts';

    public const RECURRING_TYPE_ID = 'recurring_type_id';

    public const INSTALLMENT_AMOUNT_TOTAL = 'installment_amount_total';

    public const CREATED_USER_ID = 'created_user_id';

    public const LOG_EMAILS = 'log_emails';

    public const CONTACT = 'contact';

    public const ACCOUNT_VAULT = 'account_vault';

    public const CREATED_USER = 'created_user';

    public const SIGNATURE = 'signature';

    public const PAYMENT_SCHEDULE = 'payment_schedule';

    public const LOCATION = 'location';

    public const PRODUCT_TRANSACTION = 'product_transaction';

    public const NEXT_RUN_DATE_MIN = 'next_run_date_min';

    public const NEXT_RUN_DATE_MAX = 'next_run_date_max';

    public const ALL_TAGS = 'all_tags';

    public const CHANGELOGS = 'changelogs';

    public const FORECAST = 'forecast';

    public const RECURRING_SPLITS = 'recurring_splits';

    public const TRANSACTIONS = 'transactions';

    private const _ALL_VALUES = [
        self::ACCOUNT_VAULT_ID,
        self::TOKEN_ID,
        self::CONTACT_ID,
        self::ACCOUNT_VAULT_API_ID,
        self::TOKEN_API_ID,
        self::_JOI,
        self::ACTIVE,
        self::DESCRIPTION,
        self::END_DATE,
        self::INSTALLMENT_TOTAL_COUNT,
        self::INTERVAL,
        self::INTERVAL_TYPE,
        self::LOCATION_ID,
        self::NOTIFICATION_DAYS,
        self::PAYMENT_METHOD,
        self::PRODUCT_TRANSACTION_ID,
        self::RECURRING_ID,
        self::RECURRING_API_ID,
        self::START_DATE,
        self::STATUS,
        self::TRANSACTION_AMOUNT,
        self::TERMS_AGREE,
        self::TERMS_AGREE_IP,
        self::RECURRING_C1,
        self::RECURRING_C2,
        self::RECURRING_C3,
        self::SEND_TO_PROC_AS_RECUR,
        self::TAGS,
        self::SECONDARY_AMOUNT,
        self::CURRENCY,
        self::ID,
        self::NEXT_RUN_DATE,
        self::CREATED_TS,
        self::MODIFIED_TS,
        self::RECURRING_TYPE_ID,
        self::INSTALLMENT_AMOUNT_TOTAL,
        self::CREATED_USER_ID,
        self::LOG_EMAILS,
        self::CONTACT,
        self::ACCOUNT_VAULT,
        self::CREATED_USER,
        self::SIGNATURE,
        self::PAYMENT_SCHEDULE,
        self::LOCATION,
        self::PRODUCT_TRANSACTION,
        self::NEXT_RUN_DATE_MIN,
        self::NEXT_RUN_DATE_MAX,
        self::ALL_TAGS,
        self::CHANGELOGS,
        self::FORECAST,
        self::RECURRING_SPLITS,
        self::TRANSACTIONS
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for Field39Enum.");
    }
}
