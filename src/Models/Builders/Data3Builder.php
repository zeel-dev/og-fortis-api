<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Data3;

/**
 * Builder for model Data3
 *
 * @see Data3
 */
class Data3Builder
{
    /**
     * @var Data3
     */
    private $instance;

    private function __construct(Data3 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new data 3 Builder object.
     */
    public static function init(): self
    {
        return new self(new Data3());
    }

    /**
     * Sets id field.
     */
    public function id(?string $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets declined transaction id field.
     */
    public function declinedTransactionId(?string $value): self
    {
        $this->instance->setDeclinedTransactionId($value);
        return $this;
    }

    /**
     * Unsets declined transaction id field.
     */
    public function unsetDeclinedTransactionId(): self
    {
        $this->instance->unsetDeclinedTransactionId();
        return $this;
    }

    /**
     * Sets payment transaction id field.
     */
    public function paymentTransactionId(?string $value): self
    {
        $this->instance->setPaymentTransactionId($value);
        return $this;
    }

    /**
     * Unsets payment transaction id field.
     */
    public function unsetPaymentTransactionId(): self
    {
        $this->instance->unsetPaymentTransactionId();
        return $this;
    }

    /**
     * Sets status field.
     */
    public function status(?string $value): self
    {
        $this->instance->setStatus($value);
        return $this;
    }

    /**
     * Sets recurring id field.
     */
    public function recurringId(?string $value): self
    {
        $this->instance->setRecurringId($value);
        return $this;
    }

    /**
     * Unsets recurring id field.
     */
    public function unsetRecurringId(): self
    {
        $this->instance->unsetRecurringId();
        return $this;
    }

    /**
     * Sets created ts field.
     */
    public function createdTs(?int $value): self
    {
        $this->instance->setCreatedTs($value);
        return $this;
    }

    /**
     * Unsets created ts field.
     */
    public function unsetCreatedTs(): self
    {
        $this->instance->unsetCreatedTs();
        return $this;
    }

    /**
     * Sets created user id field.
     */
    public function createdUserId(?string $value): self
    {
        $this->instance->setCreatedUserId($value);
        return $this;
    }

    /**
     * Unsets created user id field.
     */
    public function unsetCreatedUserId(): self
    {
        $this->instance->unsetCreatedUserId();
        return $this;
    }

    /**
     * Sets modified ts field.
     */
    public function modifiedTs(?int $value): self
    {
        $this->instance->setModifiedTs($value);
        return $this;
    }

    /**
     * Unsets modified ts field.
     */
    public function unsetModifiedTs(): self
    {
        $this->instance->unsetModifiedTs();
        return $this;
    }

    /**
     * Sets modified user id field.
     */
    public function modifiedUserId(?string $value): self
    {
        $this->instance->setModifiedUserId($value);
        return $this;
    }

    /**
     * Unsets modified user id field.
     */
    public function unsetModifiedUserId(): self
    {
        $this->instance->unsetModifiedUserId();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new data 3 object.
     */
    public function build(): Data3
    {
        return CoreHelper::clone($this->instance);
    }
}
