<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Data32 implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $resultCode;

    /**
     * @var string|null
     */
    private $merchantID;

    /**
     * @var bool|null
     */
    private $applePay;

    /**
     * @var bool|null
     */
    private $googlePay;

    /**
     * @var array[]|null
     */
    private $applePayDomains;

    /**
     * @var string|null
     */
    private $message;

    /**
     * @var string|null
     */
    private $googleJWT;

    /**
     * Returns Result Code.
     * 0 for success, 1 for error. More details on Message field.
     */
    public function getResultCode(): ?bool
    {
        return $this->resultCode;
    }

    /**
     * Sets Result Code.
     * 0 for success, 1 for error. More details on Message field.
     *
     * @maps resultCode
     */
    public function setResultCode(?bool $resultCode): void
    {
        $this->resultCode = $resultCode;
    }

    /**
     * Returns Merchant ID.
     * string needed to set up a Google or Apple Pay button.
     */
    public function getMerchantID(): ?string
    {
        return $this->merchantID;
    }

    /**
     * Sets Merchant ID.
     * string needed to set up a Google or Apple Pay button.
     *
     * @maps merchantID
     */
    public function setMerchantID(?string $merchantID): void
    {
        $this->merchantID = $merchantID;
    }

    /**
     * Returns Apple Pay.
     * Boolean indicating if Apple Pay is enabled for this merchant.
     */
    public function getApplePay(): ?bool
    {
        return $this->applePay;
    }

    /**
     * Sets Apple Pay.
     * Boolean indicating if Apple Pay is enabled for this merchant.
     *
     * @maps applePay
     */
    public function setApplePay(?bool $applePay): void
    {
        $this->applePay = $applePay;
    }

    /**
     * Returns Google Pay.
     * Boolean indicating if Google Pay is enabled for this merchant.
     */
    public function getGooglePay(): ?bool
    {
        return $this->googlePay;
    }

    /**
     * Sets Google Pay.
     * Boolean indicating if Google Pay is enabled for this merchant.
     *
     * @maps googlePay
     */
    public function setGooglePay(?bool $googlePay): void
    {
        $this->googlePay = $googlePay;
    }

    /**
     * Returns Apple Pay Domains.
     * Array of the domains registered with apple for this domain.  For Apple Pay, each domain name a
     * merchant uses used has to be registered with Apple before it can be used.  When calling Merchant
     * Details the gateway first checks if the domain provided is already registered for that merchant. If
     * it is, it will return applePay: true and resultCode: 0 and the domain will be listed in appleDomains
     * array.  It will also list all verified domains for that merchant.  If the domain is not verified it
     * will try to verify it and if successful will return applePay: true and the domain will be listed in
     * applePayDomains.  If the domain is not verified successfully the response will return applePay:
     * false and resultCode: 1. Merchant will not be able to process payment in that domain.  Apple
     * verifies the domain by pulling down a verification text file that should be placed on http:
     * //domainname.well-known/apple-developer-merchantid-domain-association.  File name must be apple-
     * developer-merchantid-domain-association without a file extension. The contents of the file may be
     * served programmatically. The contents of this file will be the same for all merchants processing
     * Apple Pay.
     *
     * @return array[]|null
     */
    public function getApplePayDomains(): ?array
    {
        return $this->applePayDomains;
    }

    /**
     * Sets Apple Pay Domains.
     * Array of the domains registered with apple for this domain.  For Apple Pay, each domain name a
     * merchant uses used has to be registered with Apple before it can be used.  When calling Merchant
     * Details the gateway first checks if the domain provided is already registered for that merchant. If
     * it is, it will return applePay: true and resultCode: 0 and the domain will be listed in appleDomains
     * array.  It will also list all verified domains for that merchant.  If the domain is not verified it
     * will try to verify it and if successful will return applePay: true and the domain will be listed in
     * applePayDomains.  If the domain is not verified successfully the response will return applePay:
     * false and resultCode: 1. Merchant will not be able to process payment in that domain.  Apple
     * verifies the domain by pulling down a verification text file that should be placed on http:
     * //domainname.well-known/apple-developer-merchantid-domain-association.  File name must be apple-
     * developer-merchantid-domain-association without a file extension. The contents of the file may be
     * served programmatically. The contents of this file will be the same for all merchants processing
     * Apple Pay.
     *
     * @maps applePayDomains
     *
     * @param array[]|null $applePayDomains
     */
    public function setApplePayDomains(?array $applePayDomains): void
    {
        $this->applePayDomains = $applePayDomains;
    }

    /**
     * Returns Message.
     * Message with information about the results.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Sets Message.
     * Message with information about the results.
     *
     * @maps message
     */
    public function setMessage(?string $message): void
    {
        $this->message = $message;
    }

    /**
     * Returns Google JWT.
     * String needed in the Google Pay request.
     */
    public function getGoogleJWT(): ?string
    {
        return $this->googleJWT;
    }

    /**
     * Sets Google JWT.
     * String needed in the Google Pay request.
     *
     * @maps googleJWT
     */
    public function setGoogleJWT(?string $googleJWT): void
    {
        $this->googleJWT = $googleJWT;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->resultCode)) {
            $json['resultCode']      = $this->resultCode;
        }
        if (isset($this->merchantID)) {
            $json['merchantID']      = $this->merchantID;
        }
        if (isset($this->applePay)) {
            $json['applePay']        = $this->applePay;
        }
        if (isset($this->googlePay)) {
            $json['googlePay']       = $this->googlePay;
        }
        if (isset($this->applePayDomains)) {
            $json['applePayDomains'] = $this->applePayDomains;
        }
        if (isset($this->message)) {
            $json['message']         = $this->message;
        }
        if (isset($this->googleJWT)) {
            $json['googleJWT']       = $this->googleJWT;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
