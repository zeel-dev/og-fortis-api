<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

class Field49Enum
{
    public const ACCOUNT_HOLDER_NAME = 'account_holder_name';

    public const ACCOUNT_NUMBER = 'account_number';

    public const ACCOUNT_VAULT_API_ID = 'account_vault_api_id';

    public const TOKEN_API_ID = 'token_api_id';

    public const ACCOUNTVAULT_C1 = 'accountvault_c1';

    public const ACCOUNTVAULT_C2 = 'accountvault_c2';

    public const ACCOUNTVAULT_C3 = 'accountvault_c3';

    public const TOKEN_C1 = 'token_c1';

    public const TOKEN_C2 = 'token_c2';

    public const TOKEN_C3 = 'token_c3';

    public const ACH_SEC_CODE = 'ach_sec_code';

    public const BILLING_ADDRESS = 'billing_address';

    public const CONTACT_ID = 'contact_id';

    public const CUSTOMER_ID = 'customer_id';

    public const IDENTITY_VERIFICATION = 'identity_verification';

    public const LOCATION_ID = 'location_id';

    public const PREVIOUS_ACCOUNT_VAULT_API_ID = 'previous_account_vault_api_id';

    public const PREVIOUS_TOKEN_API_ID = 'previous_token_api_id';

    public const PREVIOUS_ACCOUNT_VAULT_ID = 'previous_account_vault_id';

    public const PREVIOUS_TOKEN_ID = 'previous_token_id';

    public const PREVIOUS_TRANSACTION_ID = 'previous_transaction_id';

    public const TERMS_AGREE = 'terms_agree';

    public const TERMS_AGREE_IP = 'terms_agree_ip';

    public const TITLE = 'title';

    public const _JOI = '_joi';

    public const ID = 'id';

    public const ACCOUNT_TYPE = 'account_type';

    public const ACTIVE = 'active';

    public const CAU_SUMMARY_STATUS_ID = 'cau_summary_status_id';

    public const CREATED_TS = 'created_ts';

    public const E_SERIAL_NUMBER = 'e_serial_number';

    public const E_TRACK_DATA = 'e_track_data';

    public const E_FORMAT = 'e_format';

    public const E_KEYED_DATA = 'e_keyed_data';

    public const EXPIRING_IN_MONTHS = 'expiring_in_months';

    public const EXP_DATE = 'exp_date';

    public const FIRST_SIX = 'first_six';

    public const HAS_RECURRING = 'has_recurring';

    public const LAST_FOUR = 'last_four';

    public const MODIFIED_TS = 'modified_ts';

    public const PAYMENT_METHOD = 'payment_method';

    public const TICKET = 'ticket';

    public const TRACK_DATA = 'track_data';

    public const CREATED_USER_ID = 'created_user_id';

    public const CAU_LAST_UPDATED_TS = 'cau_last_updated_ts';

    public const CARD_BIN = 'card_bin';

    public const ROUTING_NUMBER = 'routing_number';

    public const LOCATION = 'location';

    public const CONTACT = 'contact';

    public const TRANSACTIONS = 'transactions';

    public const ACTIVERECURRINGS = 'activeRecurrings';

    public const IS_DELETABLE = 'is_deletable';

    public const SIGNATURE = 'signature';

    public const CREATED_USER = 'created_user';

    public const CHANGELOGS = 'changelogs';

    public const ACCOUNT_VAULT_CAU_LOGS = 'account_vault_cau_logs';

    public const ACCOUNT_VAULT_CAU_PRODUCT_TRANSACTIONS = 'account_vault_cau_product_transactions';

    private const _ALL_VALUES = [
        self::ACCOUNT_HOLDER_NAME,
        self::ACCOUNT_NUMBER,
        self::ACCOUNT_VAULT_API_ID,
        self::TOKEN_API_ID,
        self::ACCOUNTVAULT_C1,
        self::ACCOUNTVAULT_C2,
        self::ACCOUNTVAULT_C3,
        self::TOKEN_C1,
        self::TOKEN_C2,
        self::TOKEN_C3,
        self::ACH_SEC_CODE,
        self::BILLING_ADDRESS,
        self::CONTACT_ID,
        self::CUSTOMER_ID,
        self::IDENTITY_VERIFICATION,
        self::LOCATION_ID,
        self::PREVIOUS_ACCOUNT_VAULT_API_ID,
        self::PREVIOUS_TOKEN_API_ID,
        self::PREVIOUS_ACCOUNT_VAULT_ID,
        self::PREVIOUS_TOKEN_ID,
        self::PREVIOUS_TRANSACTION_ID,
        self::TERMS_AGREE,
        self::TERMS_AGREE_IP,
        self::TITLE,
        self::_JOI,
        self::ID,
        self::ACCOUNT_TYPE,
        self::ACTIVE,
        self::CAU_SUMMARY_STATUS_ID,
        self::CREATED_TS,
        self::E_SERIAL_NUMBER,
        self::E_TRACK_DATA,
        self::E_FORMAT,
        self::E_KEYED_DATA,
        self::EXPIRING_IN_MONTHS,
        self::EXP_DATE,
        self::FIRST_SIX,
        self::HAS_RECURRING,
        self::LAST_FOUR,
        self::MODIFIED_TS,
        self::PAYMENT_METHOD,
        self::TICKET,
        self::TRACK_DATA,
        self::CREATED_USER_ID,
        self::CAU_LAST_UPDATED_TS,
        self::CARD_BIN,
        self::ROUTING_NUMBER,
        self::LOCATION,
        self::CONTACT,
        self::TRANSACTIONS,
        self::ACTIVERECURRINGS,
        self::IS_DELETABLE,
        self::SIGNATURE,
        self::CREATED_USER,
        self::CHANGELOGS,
        self::ACCOUNT_VAULT_CAU_LOGS,
        self::ACCOUNT_VAULT_CAU_PRODUCT_TRANSACTIONS
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for Field49Enum.");
    }
}
