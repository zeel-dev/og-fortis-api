<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Addon implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $title;

    /**
     * @var string|null
     */
    private $secret;

    /**
     * @var string|null
     */
    private $iframeUrl;

    /**
     * @var array
     */
    private $locationSetupUrl = [];

    /**
     * @var array
     */
    private $userSetupUrl = [];

    /**
     * @var bool|null
     */
    private $encryptUrlParams;

    /**
     * Returns Title.
     * Title
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Secret.
     * Secret
     */
    public function getSecret(): ?string
    {
        return $this->secret;
    }

    /**
     * Sets Secret.
     * Secret
     *
     * @maps secret
     */
    public function setSecret(?string $secret): void
    {
        $this->secret = $secret;
    }

    /**
     * Returns Iframe Url.
     * Iframe URL
     */
    public function getIframeUrl(): ?string
    {
        return $this->iframeUrl;
    }

    /**
     * Sets Iframe Url.
     * Iframe URL
     *
     * @maps iframe_url
     */
    public function setIframeUrl(?string $iframeUrl): void
    {
        $this->iframeUrl = $iframeUrl;
    }

    /**
     * Returns Location Setup Url.
     * Location Setup URL
     */
    public function getLocationSetupUrl(): ?string
    {
        if (count($this->locationSetupUrl) == 0) {
            return null;
        }
        return $this->locationSetupUrl['value'];
    }

    /**
     * Sets Location Setup Url.
     * Location Setup URL
     *
     * @maps location_setup_url
     */
    public function setLocationSetupUrl(?string $locationSetupUrl): void
    {
        $this->locationSetupUrl['value'] = $locationSetupUrl;
    }

    /**
     * Unsets Location Setup Url.
     * Location Setup URL
     */
    public function unsetLocationSetupUrl(): void
    {
        $this->locationSetupUrl = [];
    }

    /**
     * Returns User Setup Url.
     * User Setup URL
     */
    public function getUserSetupUrl(): ?string
    {
        if (count($this->userSetupUrl) == 0) {
            return null;
        }
        return $this->userSetupUrl['value'];
    }

    /**
     * Sets User Setup Url.
     * User Setup URL
     *
     * @maps user_setup_url
     */
    public function setUserSetupUrl(?string $userSetupUrl): void
    {
        $this->userSetupUrl['value'] = $userSetupUrl;
    }

    /**
     * Unsets User Setup Url.
     * User Setup URL
     */
    public function unsetUserSetupUrl(): void
    {
        $this->userSetupUrl = [];
    }

    /**
     * Returns Encrypt Url Params.
     * Encrypt URL Params
     */
    public function getEncryptUrlParams(): ?bool
    {
        return $this->encryptUrlParams;
    }

    /**
     * Sets Encrypt Url Params.
     * Encrypt URL Params
     *
     * @maps encrypt_url_params
     */
    public function setEncryptUrlParams(?bool $encryptUrlParams): void
    {
        $this->encryptUrlParams = $encryptUrlParams;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->title)) {
            $json['title']              = $this->title;
        }
        if (isset($this->secret)) {
            $json['secret']             = $this->secret;
        }
        if (isset($this->iframeUrl)) {
            $json['iframe_url']         = $this->iframeUrl;
        }
        if (!empty($this->locationSetupUrl)) {
            $json['location_setup_url'] = $this->locationSetupUrl['value'];
        }
        if (!empty($this->userSetupUrl)) {
            $json['user_setup_url']     = $this->userSetupUrl['value'];
        }
        if (isset($this->encryptUrlParams)) {
            $json['encrypt_url_params'] = $this->encryptUrlParams;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
