<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

/**
 * Surcharge Information on `expand`
 */
class Surcharge implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $surchargeFee;

    /**
     * @var int|null
     */
    private $surchargeRate;

    /**
     * @var array
     */
    private $maxTransactionAmount = [];

    /**
     * @var array
     */
    private $minFeeAmount = [];

    /**
     * @var array
     */
    private $maxFeeAmount = [];

    /**
     * @var bool|null
     */
    private $surchargeOnRecurring;

    /**
     * @var bool|null
     */
    private $refundSurcharges;

    /**
     * @var string|null
     */
    private $productTransactionId;

    /**
     * @var bool|null
     */
    private $runAsSeparateTransaction;

    /**
     * @var array
     */
    private $applyToUserTypeId = [];

    /**
     * @var array
     */
    private $title = [];

    /**
     * @var array
     */
    private $surchargeLabel = [];

    /**
     * @var array
     */
    private $surchargeTransactionProductId = [];

    /**
     * @var bool|null
     */
    private $stateExceptionCheck;

    /**
     * @var bool|null
     */
    private $compliant;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $createdUserId;

    /**
     * @var string|null
     */
    private $modifiedUserId;

    /**
     * @var int|null
     */
    private $createdTs;

    /**
     * @var int|null
     */
    private $modifiedTs;

    /**
     * Returns Surcharge Fee.
     * Surcharge Fee
     */
    public function getSurchargeFee(): ?int
    {
        return $this->surchargeFee;
    }

    /**
     * Sets Surcharge Fee.
     * Surcharge Fee
     *
     * @maps surcharge_fee
     */
    public function setSurchargeFee(?int $surchargeFee): void
    {
        $this->surchargeFee = $surchargeFee;
    }

    /**
     * Returns Surcharge Rate.
     * Surcharge Rate
     */
    public function getSurchargeRate(): ?int
    {
        return $this->surchargeRate;
    }

    /**
     * Sets Surcharge Rate.
     * Surcharge Rate
     *
     * @maps surcharge_rate
     */
    public function setSurchargeRate(?int $surchargeRate): void
    {
        $this->surchargeRate = $surchargeRate;
    }

    /**
     * Returns Max Transaction Amount.
     * Max Transaction Amount
     */
    public function getMaxTransactionAmount(): ?int
    {
        if (count($this->maxTransactionAmount) == 0) {
            return null;
        }
        return $this->maxTransactionAmount['value'];
    }

    /**
     * Sets Max Transaction Amount.
     * Max Transaction Amount
     *
     * @maps max_transaction_amount
     */
    public function setMaxTransactionAmount(?int $maxTransactionAmount): void
    {
        $this->maxTransactionAmount['value'] = $maxTransactionAmount;
    }

    /**
     * Unsets Max Transaction Amount.
     * Max Transaction Amount
     */
    public function unsetMaxTransactionAmount(): void
    {
        $this->maxTransactionAmount = [];
    }

    /**
     * Returns Min Fee Amount.
     * Min Fee Amount
     */
    public function getMinFeeAmount(): ?int
    {
        if (count($this->minFeeAmount) == 0) {
            return null;
        }
        return $this->minFeeAmount['value'];
    }

    /**
     * Sets Min Fee Amount.
     * Min Fee Amount
     *
     * @maps min_fee_amount
     */
    public function setMinFeeAmount(?int $minFeeAmount): void
    {
        $this->minFeeAmount['value'] = $minFeeAmount;
    }

    /**
     * Unsets Min Fee Amount.
     * Min Fee Amount
     */
    public function unsetMinFeeAmount(): void
    {
        $this->minFeeAmount = [];
    }

    /**
     * Returns Max Fee Amount.
     * Max Fee Amount
     */
    public function getMaxFeeAmount(): ?int
    {
        if (count($this->maxFeeAmount) == 0) {
            return null;
        }
        return $this->maxFeeAmount['value'];
    }

    /**
     * Sets Max Fee Amount.
     * Max Fee Amount
     *
     * @maps max_fee_amount
     */
    public function setMaxFeeAmount(?int $maxFeeAmount): void
    {
        $this->maxFeeAmount['value'] = $maxFeeAmount;
    }

    /**
     * Unsets Max Fee Amount.
     * Max Fee Amount
     */
    public function unsetMaxFeeAmount(): void
    {
        $this->maxFeeAmount = [];
    }

    /**
     * Returns Surcharge on Recurring.
     * Surcharge On Recurring
     */
    public function getSurchargeOnRecurring(): ?bool
    {
        return $this->surchargeOnRecurring;
    }

    /**
     * Sets Surcharge on Recurring.
     * Surcharge On Recurring
     *
     * @maps surcharge_on_recurring
     */
    public function setSurchargeOnRecurring(?bool $surchargeOnRecurring): void
    {
        $this->surchargeOnRecurring = $surchargeOnRecurring;
    }

    /**
     * Returns Refund Surcharges.
     * Refund Surcharges
     */
    public function getRefundSurcharges(): ?bool
    {
        return $this->refundSurcharges;
    }

    /**
     * Sets Refund Surcharges.
     * Refund Surcharges
     *
     * @maps refund_surcharges
     */
    public function setRefundSurcharges(?bool $refundSurcharges): void
    {
        $this->refundSurcharges = $refundSurcharges;
    }

    /**
     * Returns Product Transaction Id.
     * Product Transaction Id
     */
    public function getProductTransactionId(): ?string
    {
        return $this->productTransactionId;
    }

    /**
     * Sets Product Transaction Id.
     * Product Transaction Id
     *
     * @maps product_transaction_id
     */
    public function setProductTransactionId(?string $productTransactionId): void
    {
        $this->productTransactionId = $productTransactionId;
    }

    /**
     * Returns Run as Separate Transaction.
     * Run As Separate Transaction
     */
    public function getRunAsSeparateTransaction(): ?bool
    {
        return $this->runAsSeparateTransaction;
    }

    /**
     * Sets Run as Separate Transaction.
     * Run As Separate Transaction
     *
     * @maps run_as_separate_transaction
     */
    public function setRunAsSeparateTransaction(?bool $runAsSeparateTransaction): void
    {
        $this->runAsSeparateTransaction = $runAsSeparateTransaction;
    }

    /**
     * Returns Apply to User Type Id.
     * Apply To User Type Id
     */
    public function getApplyToUserTypeId(): ?string
    {
        if (count($this->applyToUserTypeId) == 0) {
            return null;
        }
        return $this->applyToUserTypeId['value'];
    }

    /**
     * Sets Apply to User Type Id.
     * Apply To User Type Id
     *
     * @maps apply_to_user_type_id
     */
    public function setApplyToUserTypeId(?string $applyToUserTypeId): void
    {
        $this->applyToUserTypeId['value'] = $applyToUserTypeId;
    }

    /**
     * Unsets Apply to User Type Id.
     * Apply To User Type Id
     */
    public function unsetApplyToUserTypeId(): void
    {
        $this->applyToUserTypeId = [];
    }

    /**
     * Returns Title.
     * Title
     */
    public function getTitle(): ?string
    {
        if (count($this->title) == 0) {
            return null;
        }
        return $this->title['value'];
    }

    /**
     * Sets Title.
     * Title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title['value'] = $title;
    }

    /**
     * Unsets Title.
     * Title
     */
    public function unsetTitle(): void
    {
        $this->title = [];
    }

    /**
     * Returns Surcharge Label.
     * Surcharge Label
     */
    public function getSurchargeLabel(): ?string
    {
        if (count($this->surchargeLabel) == 0) {
            return null;
        }
        return $this->surchargeLabel['value'];
    }

    /**
     * Sets Surcharge Label.
     * Surcharge Label
     *
     * @maps surcharge_label
     */
    public function setSurchargeLabel(?string $surchargeLabel): void
    {
        $this->surchargeLabel['value'] = $surchargeLabel;
    }

    /**
     * Unsets Surcharge Label.
     * Surcharge Label
     */
    public function unsetSurchargeLabel(): void
    {
        $this->surchargeLabel = [];
    }

    /**
     * Returns Surcharge Transaction Product Id.
     * Surcharge Transaction Product Id
     */
    public function getSurchargeTransactionProductId(): ?string
    {
        if (count($this->surchargeTransactionProductId) == 0) {
            return null;
        }
        return $this->surchargeTransactionProductId['value'];
    }

    /**
     * Sets Surcharge Transaction Product Id.
     * Surcharge Transaction Product Id
     *
     * @maps surcharge_transaction_product_id
     */
    public function setSurchargeTransactionProductId(?string $surchargeTransactionProductId): void
    {
        $this->surchargeTransactionProductId['value'] = $surchargeTransactionProductId;
    }

    /**
     * Unsets Surcharge Transaction Product Id.
     * Surcharge Transaction Product Id
     */
    public function unsetSurchargeTransactionProductId(): void
    {
        $this->surchargeTransactionProductId = [];
    }

    /**
     * Returns State Exception Check.
     * State Exception Check
     */
    public function getStateExceptionCheck(): ?bool
    {
        return $this->stateExceptionCheck;
    }

    /**
     * Sets State Exception Check.
     * State Exception Check
     *
     * @maps state_exception_check
     */
    public function setStateExceptionCheck(?bool $stateExceptionCheck): void
    {
        $this->stateExceptionCheck = $stateExceptionCheck;
    }

    /**
     * Returns Compliant.
     * Compliant
     */
    public function getCompliant(): ?bool
    {
        return $this->compliant;
    }

    /**
     * Sets Compliant.
     * Compliant
     *
     * @maps compliant
     */
    public function setCompliant(?bool $compliant): void
    {
        $this->compliant = $compliant;
    }

    /**
     * Returns Id.
     * Surcharge Id
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Surcharge Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created User Id.
     * User ID Created the register
     */
    public function getCreatedUserId(): ?string
    {
        return $this->createdUserId;
    }

    /**
     * Sets Created User Id.
     * User ID Created the register
     *
     * @maps created_user_id
     */
    public function setCreatedUserId(?string $createdUserId): void
    {
        $this->createdUserId = $createdUserId;
    }

    /**
     * Returns Modified User Id.
     * Last User ID that updated the register
     */
    public function getModifiedUserId(): ?string
    {
        return $this->modifiedUserId;
    }

    /**
     * Sets Modified User Id.
     * Last User ID that updated the register
     *
     * @maps modified_user_id
     */
    public function setModifiedUserId(?string $modifiedUserId): void
    {
        $this->modifiedUserId = $modifiedUserId;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): ?int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @maps modified_ts
     */
    public function setModifiedTs(?int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->surchargeFee)) {
            $json['surcharge_fee']                    = $this->surchargeFee;
        }
        if (isset($this->surchargeRate)) {
            $json['surcharge_rate']                   = $this->surchargeRate;
        }
        if (!empty($this->maxTransactionAmount)) {
            $json['max_transaction_amount']           = $this->maxTransactionAmount['value'];
        }
        if (!empty($this->minFeeAmount)) {
            $json['min_fee_amount']                   = $this->minFeeAmount['value'];
        }
        if (!empty($this->maxFeeAmount)) {
            $json['max_fee_amount']                   = $this->maxFeeAmount['value'];
        }
        if (isset($this->surchargeOnRecurring)) {
            $json['surcharge_on_recurring']           = $this->surchargeOnRecurring;
        }
        if (isset($this->refundSurcharges)) {
            $json['refund_surcharges']                = $this->refundSurcharges;
        }
        if (isset($this->productTransactionId)) {
            $json['product_transaction_id']           = $this->productTransactionId;
        }
        if (isset($this->runAsSeparateTransaction)) {
            $json['run_as_separate_transaction']      = $this->runAsSeparateTransaction;
        }
        if (!empty($this->applyToUserTypeId)) {
            $json['apply_to_user_type_id']            = $this->applyToUserTypeId['value'];
        }
        if (!empty($this->title)) {
            $json['title']                            = $this->title['value'];
        }
        if (!empty($this->surchargeLabel)) {
            $json['surcharge_label']                  = $this->surchargeLabel['value'];
        }
        if (!empty($this->surchargeTransactionProductId)) {
            $json['surcharge_transaction_product_id'] = $this->surchargeTransactionProductId['value'];
        }
        if (isset($this->stateExceptionCheck)) {
            $json['state_exception_check']            = $this->stateExceptionCheck;
        }
        if (isset($this->compliant)) {
            $json['compliant']                        = $this->compliant;
        }
        if (isset($this->id)) {
            $json['id']                               = $this->id;
        }
        if (isset($this->createdUserId)) {
            $json['created_user_id']                  = $this->createdUserId;
        }
        if (isset($this->modifiedUserId)) {
            $json['modified_user_id']                 = $this->modifiedUserId;
        }
        if (isset($this->createdTs)) {
            $json['created_ts']                       = $this->createdTs;
        }
        if (isset($this->modifiedTs)) {
            $json['modified_ts']                      = $this->modifiedTs;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
